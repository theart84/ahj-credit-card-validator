(()=>{"use strict";class t{constructor(t){if(!(t instanceof HTMLElement))throw new Error("Передайте HTML элемент");this.container=t,this.submitListeners=[],this.inputListeners=[]}static get markup(){return'\n      <div class="container">\n        <div class="row mb-5">\n          <div class="card shadow-sm">\n            <div class="card-body">\n              <h1 class="text-center">Credit Card Validator</h1>\n            </div>\n          </div>\n        </div>\n        <div class="row mb-5">\n          <div class="card shadow-sm p20">\n            <div class="card-body">\n            <div class="row">\n              <ul class="card-types">\n               <li><span class="card-item mir"></span></li>              \n               <li><span class="card-item visa"></span></li>              \n               <li><span class="card-item master"></span></li>              \n               <li><span class="card-item amex"></span></li>              \n               <li><span class="card-item jcb"></span></li>              \n              </ul>\n             <div class="row">\n              <form id="formValidation" class="row align-items-end justify-content-between">\n                <div class="col-8">                  \n                    <label for="cardNumber" class="form-label">Введите номер карты</label>\n                    <input type="number" class="form-control" id="cardNumber" placeholder="Введите номер карты">                  \n                </div> \n                <div class="col-4">\n                  <button type="submit" class="btn btn-success">Click to Validate</button>\n                </div>\n              </form>\n             </div>             \n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    '}render(){this.container.insertAdjacentHTML("beforeend",this.constructor.markup);const t=this.container.querySelector(this.constructor.formID),s=this.container.querySelector(this.constructor.inputID);this.cards=[...this.container.querySelectorAll(".card-item")],t.addEventListener("submit",(t=>this.onSubmit(t,s.value))),s.addEventListener("input",(t=>this.onInput(t)))}static get inputID(){return"#cardNumber"}static get formID(){return"#formValidation"}subscribeOnSubmit(t){this.submitListeners.push(t)}subscribeOnInput(t){this.inputListeners.push(t)}onSubmit(t,s){t.preventDefault(),this.submitListeners.forEach((t=>t.call(null,s)))}onInput(t){t.preventDefault(),this.inputListeners.forEach((s=>s.call(null,t.target.value)))}showPaySystem(t){this.cards.forEach((s=>{t?s.classList.contains(t)||s.classList.add("hidden"):s.classList.remove("hidden")}))}}class s{constructor(t){if(!(t instanceof HTMLElement))throw new Error("Передайте HTML элемент");this.container=t}static get markup(){return'\n    <div class="modal-container">\n      <div class="modal-background"></div>\n      <div class="modal-body">\n        <h2 class="modal-text"></h2>\n        <button class="btn btn-success modal-button">Ok</button>\n      </div>        \n    </div>\n    '}render(){this.container.insertAdjacentHTML("afterbegin",this.constructor.markup),this.modalButtonElement.addEventListener("click",(()=>this.removeModal())),this.modalBackGroundElement.addEventListener("click",(()=>this.removeModal()))}showModal(t){this.modalContainerElement.classList.add("active"),this.modalText=t}get modalButtonElement(){return this.container.querySelector(".modal-button")}get modalContainerElement(){return this.container.querySelector(".modal-container")}get modalBackGroundElement(){return this.container.querySelector(".modal-background")}get modalText(){return this.container.querySelector(".modal-text").textContent}set modalText(t){this.container.querySelector(".modal-text").textContent=t}removeModal(){this.modalContainerElement.classList.remove("active")}}const e={2:{short:"mir",full:"Mir"},31:{short:"jcb",full:"JCB International"},34:{short:"amex",full:"American Express"},35:{short:"jcb",full:"JCB International"},37:{short:"amex",full:"American Express"},4:{short:"visa",full:"Visa"},51:{short:"master",full:"MasterCard"},52:{short:"master",full:"MasterCard"},53:{short:"master",full:"MasterCard"},54:{short:"master",full:"MasterCard"},55:{short:"master",full:"MasterCard"}},n=document.querySelector("#root");new class{constructor(e,n){this.validatorWidget=new t(e),this.modal=new s(e),this.paySystem=n,this.currentPaymentSystem=null}init(){this.validatorWidget.render(),this.modal.render(),this.validatorWidget.subscribeOnSubmit(this.validateNumbers.bind(this)),this.validatorWidget.subscribeOnInput(this.identVendors.bind(this))}validateNumbers(t){t.length<15?this.modal.showModal("This card is not valid"):this.validateCardNumbers(t)?this.modal.showModal(`This is a ${this.currentPaymentSystem} card and it is valid`):this.modal.showModal("This card is not valid")}identVendors(t){let s=t.slice(0,2);this.paySystem[s]||(s=t.slice(0,1));let e=null;this.paySystem[s]&&(e=this.paySystem[s].short,this.currentPaymentSystem=this.paySystem[s].full),this.validatorWidget.showPaySystem(e)}validateCardNumbers(t){let s=0,e=!1;for(let n=(t=t.replace(/\D/g,"")).length-1;n>=0;n--){let a=parseInt(t.charAt(n),10);e&&(a*=2)>9&&(a-=9),s+=a,e=!e}return s%10==0}}(n,e).init()})();